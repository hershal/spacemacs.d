* macros
** hb/configure-macros
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-macros ()
    (bind-key "M-;" 'comment-line-dwim)
    (bind-key "C-x c" 'capitalize-line-dwim)
    (bind-key "C-x 2" 'vsplit-last-buffer)
    (bind-key "C-x 3" 'hsplit-last-buffer))
#+END_SRC
** hb/quotemeta
#+BEGIN_SRC emacs-lisp :tangle yes
(defun hb/quotemeta (str-val)
  "Return STR-VAL with all non-word characters and / escaped with backslash.

  This is more vigorous than `shell-quote-argument'."
  (save-match-data
    (replace-regexp-in-string "\\([^A-Za-z_0-9 /]\\)" "\\\\\\1" str-val)))
#+END_SRC

** comment-line-dwim
#+BEGIN_SRC emacs-lisp :tangle yes
(defun comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
  If no region is selected and current line is not blank and we are not at the end of the line,
  then comment current line.
  Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (or (and (not (region-active-p)) (not (looking-at "[ \t]*$"))) (and (not (equal comment-end "")) (looking-at (hb/quotemeta comment-end))))
      (if (looking-at (hb/quotemeta comment-end))
          (progn
            (comment-or-uncomment-region (if (comment-beginning) (comment-beginning) (line-beginning-position)) (line-end-position))
            (delete-trailing-whitespace (line-beginning-position) (line-end-position)))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
    (comment-dwim arg)))
#+END_SRC

** capitalize-dwim-line
#+BEGIN_SRC emacs-lisp :tangle yes
(defun capitalize-line-dwim ()
  (interactive)
  (if (region-active-p)
      (save-excursion
        (let ((beg (region-beginning))
              (end (region-end)))
          (capitalize-region beg end)))
    (save-excursion
      (let ((beg (line-beginning-position))
            (end (line-end-position)))
        (capitalize-region beg end)))))
#+END_SRC

** after
This is a cool macro from milkypostman which runs a function body
after a mode loads into emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defmacro after (mode &rest body)
    "`eval-after-load' MODE evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,mode
       '(progn ,@body)))
#+END_SRC
** split-last-buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))

  (defun hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
#+END_SRC
* general
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-general ()
    (setq evil-move-beyond-eol t
          kill-whole-line t
          org-src-fontify-natively nil
          shell-command-switch "-ci")

    (evil-leader/set-key "b D" 'kill-buffer-and-window))
#+END_SRC
* packages
* how to write
- Do not put pure source code, write defuns instead.
- This file is sourced by clients.
- Let the client choose what to run.
