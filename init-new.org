* init
#+PROPERTY: header-args :mkdirp t

#+BEGIN_SRC emacs-lisp :tangle yes
  (defconst hb/configs
    '(introduction os-specific spacemacs internal conclusion))

  (defun hb/init ()
    (hb/load-configs hb/configs))

  (defun hb/load-configs (configs)
    (mapc 'hb/load-config configs)  )

  (defun hb/load-config (config)
    (message (format "loading %S..." config))
    (funcall (intern (format "hb/configure-%S" config)))
    (message (format "loading %S... done." config)))
#+END_SRC
* introduction
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-introduction ()
    (hb/load-configs '(who-am-i)))
#+END_SRC
** who-am-i
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-who-am-i ()
    (setq user-full-name "Hershal Bhave"))
#+END_SRC
* os-specific
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-os-specific ()
    (hb/load-configs '()))
#+END_SRC
* spacemacs
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-spacemacs ()
    (hb/load-configs '(helm magit))
    (bind-key "C-x C-b" 'spacemacs/alternate-buffer))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-helm ()
    (with-eval-after-load 'helm
      (dolist (keymap (list helm-find-files-map helm-read-file-map))
        (bind-key "C-h" 'helm-find-files-up-one-level keymap)
        (bind-key "C-l" 'helm-execute-persistent-action keymap)))
    (bind-key "C-x C-f" 'spacemacs/helm-find-files)
    (bind-key "C-x b" 'helm-mini)
    (bind-key "C-'" 'helm-M-x)
    (bind-key "M-y" 'helm-show-kill-ring)
    (bind-key "M-y" 'helm-show-kill-ring)
    (setq helm-ff-newfile-prompt-p nil
          helm-buffer-max-length nil))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-magit ()
    (setq-default git-magit-status-fullscreen t)
    (setq magit-repository-directories "~/repos/"))
#+END_SRC
* internal
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-internal ()
    (hb/load-configs '(split-last-buffer capitalize-line-dwim
                       eval-and-replace comment-line-dwim))

    (setq vc-follow-symlinks t
          evil-move-beyond-eol t
          kill-whole-line t
          shell-command-switch "-ci"
          tramp-auto-save-directory "~/tmp/autosave-tramp/"
          split-height-threshold nil
          split-width-threshold 150
          search-whitespace-regexp "[ \t\r\n\-]+")

    (bind-key "C-x k" 'kill-this-buffer)
    (bind-key "C-x C-K" 'kill-buffer-and-window))
#+END_SRC
** macros
*** split-last-buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-split-last-buffer ()
    (defun vsplit-last-buffer (prefix)
      "Split the window vertically and display the previous buffer."
      (interactive "p")
      (split-window-vertically)
      (other-window 1 nil)
      (if (= prefix 1) (switch-to-next-buffer)))

    (defun hsplit-last-buffer (prefix)
      "Split the window horizontally and display the previous buffer."
      (interactive "p")
      (split-window-horizontally)
      (other-window 1 nil)
      (if (= prefix 1) (switch-to-next-buffer)))

    (bind-key "C-x 2" 'vsplit-last-buffer)
    (bind-key "C-x 3" 'hsplit-last-buffer))
#+END_SRC

*** capitalize-line-dwim
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-capitalize-line-dwim ()
   (defun capitalize-line-dwim ()
     (interactive)
     (if (region-active-p)
         (save-excursion
           (let ((beg (region-beginning))
                 (end (region-end)))
             (capitalize-region beg end)))
       (save-excursion
         (let ((beg (line-beginning-position))
               (end (line-end-position)))
           (capitalize-region beg end)))))
   (bind-key "C-x c" 'capitalize-line-dwim))
#+END_SRC

*** eval-and-replace
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-eval-and-replace ()
    (defun eval-and-replace ()
      "Replace the preceding sexp with its value."
      (interactive)
      (backward-kill-sexp)
      (condition-case nil
          (prin1 (eval (read (current-kill 0)))
                 (current-buffer))
        (error (message "Invalid expression")
               (insert (current-kill 0)))))
    (bind-key "C-c C-x C-e" 'eval-and-replace))
#+END_SRC

*** comment-line-dwim
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-comment-line-dwim ()
    (defun comment-line-dwim (&optional arg)
      "Replacement for the comment-dwim command.
    If no region is selected and current line is not blank and we
    are not at the end of the line, then comment current line.
    Replaces default behaviour of comment-dwim, when it inserts
    comment at the end of the line."
      (interactive "*P")
      (comment-normalize-vars)
      (if (or (and (not (region-active-p))
                   (not (looking-at "[ \t]*$")))
              (and (not (equal comment-end ""))
                   (looking-at (hb/quotemeta comment-end))))
          (if (looking-at (hb/quotemeta comment-end))
              (progn
                (comment-or-uncomment-region
                 (if (comment-beginning)
                     (comment-beginning)
                   (line-beginning-position))
                 (line-end-position))
                (delete-trailing-whitespace
                 (line-beginning-position) (line-end-position)))
            (comment-or-uncomment-region
             (line-beginning-position) (line-end-position)))
        (comment-dwim arg)))
    (bind-key "C-;" 'comment-line-dwim))
#+END_SRC

** TODO visual-line-mode

* layers
These are layers which are tangled into the =layers= directory.
** TODO multiple-cursors
** TODO smartparens
:PROPERTIES:
:header-args+: :tangle layers/hb-smartparens/packages.el
:END:

*** packages
#+BEGIN_SRC emacs-lisp
(setq hb-smartparens-packages '(smartparens))

(defun hb-smartparens/init-smartparens ()
  (message "initializing smartparens")
  (use-package smartparens
    :ensure t
    :config (hb/configure-smartparens)))
#+END_SRC
*** bindings
#+BEGIN_SRC emacs-lisp
  (defun hb/configure-smartparens-bindings ()
    (bind-key "C-*" 'sp-wrap-with-parens smartparens-mode-map)
    (bind-key "C-<backspace>" 'sp-splice-sexp smartparens-mode-map)
    (bind-key "C-)" 'sp-forward-slurp-sexp smartparens-mode-map)
    (bind-key "C-(" 'sp-forward-barf-sexp smartparens-mode-map)
    (bind-key "C-{" 'sp-backward-slurp-sexp smartparens-mode-map)
    (bind-key "C-}" 'sp-backward-barf-sexp smartparens-mode-map))
#+END_SRC
*** configuration
#+BEGIN_SRC emacs-lisp
(defun hb/configure-smartparens ()
  (smartparens-global-mode)
  (show-smartparens-global-mode)
  (hb/configure-smartparens-bindings))

(defun sp-wrap-with-parens (&optional arg)
  (interactive "P")
  (sp-wrap-with-pair "("))
#+END_SRC
** TODO undo-tree
** TODO visual-fill-colum-mode
** lisp
:PROPERTIES:
:header-args+: :tangle layers/hb-lisp/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (defvar hb-lisp-mode-hooks
    '(emacs-lisp-mode-hook lisp-mode-hook lisp-interaction-mode-hook)
    "Major mode hooks which require smartparens to be extra lispy")

  (setq hb-lisp-packages '(smartparens aggressive-indent))

  (defun hb-lisp/remove-bad-lisp-pairs ()
    (sp-local-pair major-mode "'" nil :actions nil)
    (sp-local-pair major-mode "`" nil :actions nil))

  (defun hb-lisp/add-hook-to-lisp-modes (hook-to-add)
    (mapc (lambda (hook)
            (add-hook hook hook-to-add))
          hb-lisp-mode-hooks))

  (defun hb-lisp/post-init-smartparens ()
    (hb-lisp/add-hook-to-lisp-modes 'hb-lisp/remove-bad-lisp-pairs))

  (defun hb-lisp/init-aggressive-indent ()
    (use-package aggressive-indent
      :ensure t))

  (defun hb-lisp/post-init-aggressive-indent ()
    (hb-lisp/add-hook-to-lisp-modes 'aggressive-indent-mode))
#+END_SRC

** TODO org
:PROPERTIES:
:header-args+: :tangle layers/hb-org/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (setq hb-org-packages '(org))

  (defun hb-org/post-init-org ()
    (with-eval-after-load 'org
      (add-to-list 'org-structure-template-alist
                   '("st"
                     "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC"
                     "<src lang=\"?\">\n\n</src>"))
      (bind-key "C-x C-s" 'org-babel-tangle org-mode-map)
      (bind-key "C-x C-s" 'hb-org/tangle-parent-buffer org-src-mode-map)))

  (defun hb-org/tangle-parent-buffer ()
    (interactive)
    (with-current-buffer (org-src--source-buffer)
      (org-babel-tangle)))
#+END_SRC
* conclusion
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-conclusion ()
    (find-file "~/.spacemacs.d/init-new.org"))
  (provide 'init-new)
#+END_SRC
