* init
#+PROPERTY: header-args :mkdirp t
#+STARTUP: content

** mechanism
Some basic configuration loading mechanisms
#+BEGIN_SRC emacs-lisp :tangle yes
  (defconst hb/configs
    '(introduction os-specific general conclusion))

  (defun hb/init ()
    (hb/load-configs hb/configs))

  (defun hb/load-configs (configs)
    (mapc 'hb/load-config configs)  )

  (defun hb/load-config (config)
    (message (format "loading %S..." config))
    (funcall (intern (format "hb/configure-%S" config)))
    (message (format "loading %S... done." config)))
#+END_SRC

** pre-init
These are defaults which must be set before spacemacs initialization.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq exec-path-from-shell-check-startup-files nil)
#+END_SRC

* introduction
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-introduction ()
    (hb/load-configs '(who-am-i)))
#+END_SRC

** who-am-i
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-who-am-i ()
    (setq user-full-name "Hershal Bhave"))
#+END_SRC

* os-specific
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-os-specific ()
    (hb/load-configs '()))
#+END_SRC

* general
** configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-general ()
    (hb/load-configs '(helm magit split-last-buffer capitalize-line-dwim
                            eval-and-replace comment-line-dwim))

    (bind-key "C-x C-b" 'spacemacs/alternate-buffer)
    (setq vc-follow-symlinks t
          evil-move-beyond-eol t
          kill-whole-line t
          shell-command-switch "-ci"
          tramp-auto-save-directory "~/tmp/autosave-tramp/"
          split-height-threshold nil
          split-width-threshold 150
          search-whitespace-regexp "[ \t\r\n\-]+"
          tab-always-indent t
          disabled-command-function nil)

    (bind-key "C-h C-F" 'find-function)
    (bind-key "C-x k" 'kill-this-buffer)
    (bind-key "C-x C-K" 'kill-buffer-and-window)
    (evil-leader/set-key "bD" 'kill-buffer-and-window))
#+END_SRC

** helm
These are bindings that brings the evil-equivalent helm functionality in
spacemacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-helm ()
    (with-eval-after-load 'helm
      (dolist (keymap (list helm-find-files-map helm-read-file-map))
        (bind-key "C-h" 'helm-find-files-up-one-level keymap)
        (bind-key "C-l" 'helm-execute-persistent-action keymap)))
    (bind-key "C-x C-f" 'spacemacs/helm-find-files)
    (bind-key "C-x b" 'helm-mini)
    (bind-key "C-'" 'helm-M-x)
    (bind-key "M-y" 'helm-show-kill-ring)
    (bind-key "M-y" 'helm-show-kill-ring)
    (setq helm-ff-newfile-prompt-p nil
          helm-buffer-max-length nil))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-magit ()
    (setq-default git-magit-status-fullscreen t)
    (setq magit-repository-directories "~/repos/"))
#+END_SRC

** macros
*** split-last-buffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-split-last-buffer ()
    (defun vsplit-last-buffer (prefix)
      "Split the window vertically and display the previous buffer."
      (interactive "p")
      (split-window-vertically)
      (other-window 1 nil)
      (if (= prefix 1) (switch-to-next-buffer)))

    (defun hsplit-last-buffer (prefix)
      "Split the window horizontally and display the previous buffer."
      (interactive "p")
      (split-window-horizontally)
      (other-window 1 nil)
      (if (= prefix 1) (switch-to-next-buffer)))

    (bind-key "C-x 2" 'vsplit-last-buffer)
    (bind-key "C-x 3" 'hsplit-last-buffer))
#+END_SRC

*** capitalize-line-dwim
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-capitalize-line-dwim ()
   (defun capitalize-line-dwim ()
     (interactive)
     (if (region-active-p)
         (save-excursion
           (let ((beg (region-beginning))
                 (end (region-end)))
             (capitalize-region beg end)))
       (save-excursion
         (let ((beg (line-beginning-position))
               (end (line-end-position)))
           (capitalize-region beg end)))))
   (bind-key "C-x c" 'capitalize-line-dwim))
#+END_SRC

*** eval-and-replace
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-eval-and-replace ()
    (defun eval-and-replace ()
      "Replace the preceding sexp with its value."
      (interactive)
      (backward-kill-sexp)
      (condition-case nil
          (prin1 (eval (read (current-kill 0)))
                 (current-buffer))
        (error (message "Invalid expression")
               (insert (current-kill 0)))))
    (bind-key "C-c C-x C-e" 'eval-and-replace))
#+END_SRC

*** comment-line-dwim
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-comment-line-dwim ()
    (defun hb/quotemeta (str-val)
      "Return STR-VAL with all non-word characters and / escaped with backslash.

    This is more vigorous than `shell-quote-argument'."
      (save-match-data
        (replace-regexp-in-string "\\([^A-Za-z_0-9 /]\\)" "\\\\\\1" str-val)))
    (defun comment-line-dwim (&optional arg) ;
      "Replacement for the comment-dwim command.
      If no region is selected and current line is not blank and we
      are not at the end of the line, then comment current line.
      Replaces default behaviour of comment-dwim, when it inserts
      comment at the end of the line."
      (interactive "*P")
      (comment-normalize-vars)
      (if (or (and (not (region-active-p))
                   (not (looking-at "[ \t]*$")))
              (and (not (equal comment-end ""))
                   (looking-at (hb/quotemeta comment-end))))
          (if (looking-at (hb/quotemeta comment-end))
              (progn
                (comment-or-uncomment-region
                 (if (comment-beginning)
                     (comment-beginning)
                   (line-beginning-position))
                 (line-end-position))
                (delete-trailing-whitespace
                 (line-beginning-position) (line-end-position)))
            (comment-or-uncomment-region
             (line-beginning-position) (line-end-position)))
        (comment-dwim arg)))
    (bind-key "C-;" 'comment-line-dwim))
#+END_SRC

* layers
These are layers which are tangled into the =layers= directory.
** multiple-cursors
:PROPERTIES:
:header-args+: :tangle layers/hb-multiple-cursors/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (setq hb-multiple-cursors-packages '(multiple-cursors))

  (defun hb-multiple-cursors/init-multiple-cursors ()
    (use-package multiple-cursors))

  (defun hb-multiple-cursors/post-init-multiple-cursors ()
    (hb/configure-mc))

  (defun hb/configure-mc-isearch ()
    (defvar jc/mc-search--last-term nil)
    (defun jc/mc-search (search-command)
      ;; Read new search term when not repeated command or applying to fake cursors
      (when (and (not mc--executing-command-for-fake-cursor)
                 (not (eq last-command 'jc/mc-search-forward))
                 (not (eq last-command 'jc/mc-search-backward)))
        (setq jc/mc-search--last-term (read-from-minibuffer "Search: ")))
      (funcall search-command jc/mc-search--last-term))
    (defun jc/mc-search-forward ()
      "Simplified version of forward search that supports multiple cursors"
      (interactive)
      (jc/mc-search 'search-forward))
    (defun jc/mc-search-backward ()
      "Simplified version of backward search that supports multiple cursors"
      (interactive)
      (jc/mc-search 'search-backward)))

  (defun hb/configure-mc-bindings ()
    (bind-key "C-S-c C-S-c" 'mc/edit-lines)
    (bind-key "C-S-SPC" 'set-rectangular-region-anchor)
    (bind-key "C->" 'mc/mark-next-like-this)
    (bind-key "C-<" 'mc/mark-previous-like-this)
    (bind-key "C-c C-<" 'mc/mark-all-like-this)
    (bind-key "C-c C->" 'mc/mark-all-like-this-dwim)
    (bind-key "C-c ~" 'mc/insert-numbers)
    (bind-key "M-~" 'mc/sort-regions)
    (bind-key "C-~" 'mc/reverse-regions)
    (bind-key "C-S-c C-e" 'mc/edit-ends-of-lines)
    (bind-key "C-S-c C-a" 'mc/edit-beginnings-of-lines)
    (bind-key "C-s" 'jc/mc-search-forward mc/keymap)
    (bind-key "C-r" 'jc/mc-search-backward mc/keymap))

  (defun hb/configure-mc-fixes ()
    (bind-key "M-SPC" 'just-one-space mc/keymap))

  (defun hb/configure-mc ()
    (hb/configure-mc-isearch)
    (hb/configure-mc-bindings)
    (hb/configure-mc-fixes))
#+END_SRC

** smartparens
:PROPERTIES:
:header-args+: :tangle layers/hb-smartparens/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (setq hb-smartparens-packages '(smartparens))

  (defun hb-smartparens/init-smartparens ()
    (message "initializing smartparens")
    (use-package smartparens))

  (defun hb-smartparens/post-init-smartparens ()
    (hb-smartparens/configure))

  (defun hb-smartparens/configure ()
    (smartparens-global-mode)
    (show-smartparens-global-mode)
    (hb-smartparens/configure-bindings)
    (hb-smartparens/configure-specialcase)
    (diminish-after-load 'smartparens))

  (defun hb-smartparens/configure-bindings ()
    (dolist (binding hb/smartparens-bindings)
      (bind-key (car binding) (cdr binding) smartparens-mode-map)))

  (defvar hb/smartparens-bindings
    '(("C-*" . sp-wrap-with-parens)
      ("C-<backspace>" . sp-splice-sexp)
      ("C-)" . sp-forward-slurp-sexp)
      ("C-(" . sp-forward-barf-sexp)
      ("C-{" . sp-backward-slurp-sexp)
      ("C-}" . sp-backward-barf-sexp)
      ("M-<up>" . sp-splice-sexp-killing-backward)))

  (defun sp-wrap-with-parens (&optional arg)
    (interactive "P")
    (sp-wrap-with-pair "("))

  (defun hb-smartparens/configure-specialcase ()
    (sp-local-pair 'text-mode "'" "'" :unless '(sp-point-after-word-p)))
#+END_SRC

** TODO visual-fill-colum-mode
** lisp
:PROPERTIES:
:header-args+: :tangle layers/hb-lisp/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (setq hb-lisp-packages '(smartparens aggressive-indent))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (defun hb-lisp/post-init-smartparens ()
    (hb-lisp/add-hook-to-lisp-modes 'hb-lisp/configure-lisp-smartparens))

  (defvar hb-lisp-mode-hooks
    '(emacs-lisp-mode-hook lisp-mode-hook lisp-interaction-mode-hook)
    "Major mode hooks which require smartparens to be extra lispy")

  (defun hb-lisp/add-hook-to-lisp-modes (hook-to-add)
    (mapc (lambda (hook)
            (add-hook hook hook-to-add))
          hb-lisp-mode-hooks))

  (defun hb-lisp/configure-lisp-smartparens ()
    (sp-local-pair major-mode "'" nil :actions nil)
    (sp-local-pair major-mode "`" nil :actions nil)
    (turn-on-smartparens-strict-mode))
#+END_SRC

*** aggressive-indent
#+BEGIN_SRC emacs-lisp
  (defun hb-lisp/init-aggressive-indent ()
    (use-package aggressive-indent))

  (defun hb-lisp/post-init-aggressive-indent ()
    (hb-lisp/add-hook-to-lisp-modes 'aggressive-indent-mode))
#+END_SRC

** TODO org
:PROPERTIES:
:header-args+: :tangle layers/hb-org/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (setq hb-org-packages '(org writegood-mode smartparens))
#+END_SRC

*** org
#+BEGIN_SRC emacs-lisp
  (defun hb-org/post-init-org ()
    (with-eval-after-load 'org
      (add-to-list 'org-structure-template-alist
                   '("st"
                     "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC"
                     "<src lang=\"?\">\n\n</src>"))
      (bind-key "C-x C-s" 'hb-org/tangle-if-modified org-mode-map)
      (bind-key "C-x C-s" 'hb-org/tangle-parent-buffer org-src-mode-map))
    (setq org-goto-interface 'outline-path-completion
          org-goto-max-level 10
          org-outline-path-complete-in-steps nil)
    (advice-add 'org-goto :after 'org-show-subtree-with-context)
    (with-eval-after-load 'ob-tangle
      (remove-hook 'org-babel-pre-tangle-hook 'save-buffer))
    (add-hook 'org-mode-hook 'turn-on-auto-fill))

  (defun org-show-subtree-with-context (&optional ignored)
    (save-excursion
      (org-up-element)
      (org-show-subtree)))

  (defun hb-org/tangle-if-modified ()
    (interactive)
    (let ((modified (buffer-modified-p)))
      (save-buffer)
      (if modified (org-babel-tangle))))

  (defun hb-org/tangle-parent-buffer ()
    (interactive)
    (let ((modified (buffer-modified-p)))
      (org-edit-src-save)
      (if modified
          (with-current-buffer (org-src--source-buffer)
            (org-babel-tangle)))))
#+END_SRC

*** writegood
#+BEGIN_SRC emacs-lisp
  (defun hb-org/init-writegood-mode ()
    (use-package writegood-mode))

  (defun hb-org/post-init-writegood-mode ()
    (add-hook 'org-mode-hook 'writegood-turn-on))
#+END_SRC

*** smartparens
#+BEGIN_SRC emacs-lisp
  (defun hb-org/post-init-smartparens ()
    (defun hb-org/configure-smartparens ()
      (sp-local-pair 'org-mode "/" "/" :unless '(sp-point-after-word-p))
      (sp-local-pair 'org-mode "_" "_" :unless '(sp-point-after-word-p))
      (sp-local-pair 'org-mode "=" "=" :unless '(sp-point-after-word-p))
      (sp-local-pair 'org-mode "'" "'" :unless '(sp-point-after-word-p))
      (sp-local-pair 'org-mode "`" "`" :unless '(sp-point-after-word-p)))
    (add-hook 'org-mode-hook 'hb-org/configure-smartparens))
#+END_SRC

** diminish
:PROPERTIES:
:header-args+: :tangle layers/hb-diminish/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (defvar hb-diminish-packages
    '(diminish aggressive-indent company evil-org holy-mode
               hybrid-mode yasnippet which-key))
  (defvar hb-diminish-modes '(auto-fill-function))
  (defvar package-mode-alist '((yasnippet . yas-minor-mode)))

  (defun hb-diminish/post-init-diminish ()
    (let ((diminish-packages (set-difference hb-diminish-packages '(diminish))))
      (dolist (package diminish-packages)
        (diminish-after-load package)))
    (dolist (mode hb-diminish-modes)
      (diminish mode)))

  (defun mode-from-package (package)
    (let ((package-mode-from-alist (cdr (assoc package package-mode-alist)))
          (package-mode-concat (intern-soft (format "%s-mode" package))))
      (cond (package-mode-from-alist package-mode-from-alist)
            (package-mode-concat package-mode-concat)
            (package package))))

  (defun diminish-after-load (file &optional mode)
    (let ((mode (if mode mode (mode-from-package file))))
      (eval-after-load file `(diminish ',mode))))
#+END_SRC

** yasnippet
:PROPERTIES:
:header-args+: :tangle layers/hb-yasnippet/packages.el
:END:

#+BEGIN_SRC emacs-lisp
  (setq hb-yasnippet-packages '(yasnippet))

  (defun hb-yasnippet/post-init-yasnippet ()
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    (bind-key "TAB" 'yas-expand yas-minor-mode-map))
#+END_SRC

* conclusion
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/configure-conclusion ()
    (find-file hb/init-file))
  (provide 'init-new)
#+END_SRC
